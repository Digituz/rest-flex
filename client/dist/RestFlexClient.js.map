{"version":3,"sources":["../src/RestFlexClient.js"],"names":["RestFlexClient","baseURL","token","headers","object","method","body","JSON","stringify","id","Promise","resolve","reject","response","json","data","Array","isArray","map","jsonToObject","filter","sort","filterParam","sortParam","url","properties","Object","getOwnPropertyNames","forEach","property","value","isDate","Date","isNaN","length","substring","replace","module","exports"],"mappings":"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","file":"RestFlexClient.js","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nclass RestFlexClient {\n  constructor(baseURL, token) {\n    this.baseURL = baseURL;\n\n    if (token) {\n      this.headers = !token ? {} : {\n        'Authorization': `Bearer ${token}`,\n      };\n    } else {\n      this.headers = {};\n    }\n  }\n\n  insert(object) {\n    return fetch(this.baseURL, {\n      method: 'POST',\n      headers: {\n        ...this.headers,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(object),\n    });\n  };\n\n  get(id) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const response = await fetch(`${this.baseURL}/${id || ''}`, {\n          headers: this.headers,\n        });\n        let data = await response.json();\n        if (Array.isArray(data)) {\n          data = data.map(RestFlexClient.jsonToObject);\n        } else {\n          data = RestFlexClient.jsonToObject(data);\n        }\n        resolve(data);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  find(filter, sort) {\n    const filterParam = JSON.stringify(filter);\n    const sortParam = sort ? JSON.stringify(sort) : null;\n    let url = `${this.baseURL}/?`;\n    url = filter ? `${url}filter=${filterParam}&` : url;\n    url = sort ? `${url}sort=${sortParam}&` : url;\n    return fetch(url, {\n      headers: this.headers,\n    });\n  }\n\n  update(id, object) {\n    return fetch(`${this.baseURL}/${id}`, {\n      method: 'PUT',\n      headers: {\n        ...this.headers,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(object)\n    });\n  }\n\n  remove(id) {\n    return fetch(`${this.baseURL}/${id}`, {\n      method: 'DELETE',\n      headers: this.headers,\n    });\n  }\n\n  static jsonToObject(json) {\n    const properties = Object.getOwnPropertyNames(json);\n    const object = {};\n    properties.forEach((property) => {\n      let value = json[property];\n      if (RestFlexClient.isDate(value)) {\n        value = new Date(value);\n      }\n      object[property] = isNaN(value) ? json[property] : value;\n    });\n    return object;\n  };\n\n  static isDate(value) {\n    if (!value) return false;\n    if (value.length !== 25) return false;\n    if (value.substring(4) !== '-') return false;\n    if (value.substring(7) !== '-') return false;\n    if (value.substring(10) !== 'T') return false;\n    if (value.substring(13) !== ':') return false;\n    if (value.substring(16) !== ':') return false;\n    if (value.substring(21) !== ':') return false;\n    return (value.replace(/\\D/g, '') + '').length === 18;\n\n  }\n}\n\nmodule.exports = RestFlexClient;\n"]}