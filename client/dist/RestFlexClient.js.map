{"version":3,"sources":["../src/RestFlexClient.js"],"names":["RestFlexClient","baseURL","token","headers","object","method","body","id","console","log","Promise","resolve","reject","response","json","data","Array","isArray","map","jsonToObject","filter","sort","filterParam","JSON","stringify","sortParam","url","properties","Object","getOwnPropertyNames","forEach","property","value","length","Date","isNaN","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;IAEMA,c;AACJ,0BAAYC,OAAZ,EAAqBC,KAArB,EAA4B;AAAA;;AAC1B,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,KAAL,GAAaA,KAAb;;AAEA,QAAIA,KAAJ,EAAW;AACT,WAAKC,OAAL,GAAe,CAACD,KAAD,GAAS,EAAT,GAAc;AAC3B,qCAA2BA;AADA,OAA7B;AAGD;AACD,SAAKC,OAAL,GAAe,EAAf;AACD;;;;2BAEMC,M,EAAQ;AACb,aAAO,iCAAM,KAAKH,OAAX,EAAoB;AACzBI,gBAAQ,MADiB;AAEzBF,iBAAS,KAAKA,OAFW;AAGzBG,cAAMF;AAHmB,OAApB,CAAP;AAKD;;;wBAEGG,E,EAAI;AAAA;;AACNC,cAAQC,GAAR,CAAY,gCAAZ,EAA8C,CAA9C;AACA,aAAO,IAAIC,OAAJ;AAAA,4FAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEfJ,0BAAQC,GAAR,CAAe,MAAKR,OAApB,UAA+BM,MAAM,EAArC;AAFe;AAAA,yBAGQ,iCAAS,MAAKN,OAAd,UAAyBM,MAAM,EAA/B,GAAqC;AAC1DJ,6BAAS,MAAKA;AAD4C,mBAArC,CAHR;;AAAA;AAGTU,0BAHS;AAAA;AAAA,yBAMEA,SAASC,IAAT,EANF;;AAAA;AAMXC,sBANW;;AAOf,sBAAIC,MAAMC,OAAN,CAAcJ,SAASE,IAAvB,CAAJ,EAAkC;AAChCA,2BAAOA,KAAKG,GAAL,CAASlB,eAAemB,YAAxB,CAAP;AACD,mBAFD,MAEO;AACLJ,2BAAOf,eAAemB,YAAf,CAA4BJ,IAA5B,CAAP;AACD;AACDJ,0BAAQI,IAAR;AAZe;AAAA;;AAAA;AAAA;AAAA;;AAcfH;;AAde;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;;AAAA;AAAA;AAAA;AAAA,UAAP;AAiBD;;;yBAEIQ,M,EAAQC,I,EAAM;AACjB,UAAMC,cAAcC,KAAKC,SAAL,CAAeJ,MAAf,CAApB;AACA,UAAMK,YAAYJ,OAAOE,KAAKC,SAAL,CAAeH,IAAf,CAAP,GAA8B,IAAhD;AACA,UAAIK,MAAS,KAAKzB,OAAd,OAAJ;AACAyB,YAAMN,SAAYM,GAAZ,eAAyBJ,WAAzB,SAA0CI,GAAhD;AACAA,YAAML,OAAUK,GAAV,aAAqBD,SAArB,SAAoCC,GAA1C;AACA,aAAO,iCAAMA,GAAN,EAAW;AAChBvB,iBAAS,KAAKA;AADE,OAAX,CAAP;AAGD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;;iCAEoBW,I,EAAM;AACxB,UAAMa,aAAaC,OAAOC,mBAAP,CAA2Bf,IAA3B,CAAnB;AACA,UAAMV,SAAS,EAAf;AACAuB,iBAAWG,OAAX,CAAmB,UAACC,QAAD,EAAc;AAC/B,YAAIC,QAAQlB,KAAKiB,QAAL,CAAZ;AACA,YAAIC,MAAMC,MAAN,IAAgB,EAApB,EAAwB;AACtBD,kBAAQ,IAAIE,IAAJ,CAASF,KAAT,CAAR;AACD;AACD5B,eAAO2B,QAAP,IAAmBI,MAAMH,KAAN,IAAelB,KAAKiB,QAAL,CAAf,GAAgCC,KAAnD;AACD,OAND;AAOA,aAAO5B,MAAP;AACD;;;;;AAGHgC,OAAOC,OAAP,GAAiBrC,cAAjB","file":"RestFlexClient.js","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nclass RestFlexClient {\n  constructor(baseURL, token) {\n    this.baseURL = baseURL;\n    this.token = token;\n\n    if (token) {\n      this.headers = !token ? {} : {\n        'Authorization': `Bearer ${token}`,\n      }\n    }\n    this.headers = {};\n  }\n\n  insert(object) {\n    return fetch(this.baseURL, {\n      method: 'POST',\n      headers: this.headers,\n      body: object,\n    });\n  };\n\n  get(id) {\n    console.log('==============================', 2);\n    return new Promise(async (resolve, reject) => {\n      try {\n        console.log(`${this.baseURL}/${id || ''}`);\n        const response = await fetch(`${this.baseURL}/${id || ''}`, {\n          headers: this.headers,\n        });\n        let data = await response.json();\n        if (Array.isArray(response.data)) {\n          data = data.map(RestFlexClient.jsonToObject);\n        } else {\n          data = RestFlexClient.jsonToObject(data);\n        }\n        resolve(data);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n\n  find(filter, sort) {\n    const filterParam = JSON.stringify(filter);\n    const sortParam = sort ? JSON.stringify(sort) : null;\n    let url = `${this.baseURL}/?`;\n    url = filter ? `${url}filter=${filterParam}&` : url;\n    url = sort ? `${url}sort=${sortParam}&` : url;\n    return fetch(url, {\n      headers: this.headers,\n    });\n  }\n\n  // update(id, object) {\n  //   return this.client.put(`/${id}`, object);\n  // };\n  //\n  // remove(id) {\n  //   return this.client.delete(`/${id}`);\n  // };\n\n  static jsonToObject(json) {\n    const properties = Object.getOwnPropertyNames(json);\n    const object = {};\n    properties.forEach((property) => {\n      let value = json[property];\n      if (value.length >= 24) {\n        value = new Date(value);\n      }\n      object[property] = isNaN(value) ? json[property] : value;\n    });\n    return object;\n  };\n}\n\nmodule.exports = RestFlexClient;\n"]}